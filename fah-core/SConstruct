import os

env = Environment(ENV = os.environ)
conf = Configure(env)

if env['CC'] == 'cl':
  env.Append(CCFLAGS = '/TP /EHsc') # C++ mode

if env['CC'] == 'gcc':
  env.Append(CCFLAGS = '-Wall -Werror -g')
  env.Append(CPPDEFINES = ['DEBUG'])

if not env.GetOption('clean'):
  # ProtoMol
  if os.environ.has_key('PROTOMOL_HOME'):
    PROTOMOL_HOME=os.environ['PROTOMOL_HOME']
    env.Append(CPPPATH = [PROTOMOL_HOME])
    env.Append(LIBPATH = [PROTOMOL_HOME])

  if not conf.CheckLib('protomol-fah'):
    print 'Need protomol >= 3.0 please set PROTOMOL_HOME';
    Exit(1);

  # Libfah
  if os.environ.has_key('LIBFAH_HOME'):
    LIBFAH_HOME=os.environ['LIBFAH_HOME']
    env.Append(CPPPATH = [LIBFAH_HOME])
    env.Append(LIBPATH = [LIBFAH_HOME])
  if not conf.CheckLib('fah'):
    print 'Need libfah please set LIBFAH_HOME';
    Exit(1);

  # boost iostreams
  if os.environ.has_key('BOOST_HOME'):
    env.Append(CPPPATH = [os.environ['BOOST_HOME']])
    env.Append(LIBPATH = [os.environ['BOOST_HOME']])

  if not conf.CheckCXXHeader('boost/iostreams/device/file.hpp'):
    print 'boost::iostreams not found.  Please set BOOST_HOME'
    Exit(1)

  if not conf.CheckLib('boost_iostreams'):
    print 'libboost_iostreams not found.  Please set BOOST_HOME'
    Exit(1)

  # Bzip2
  if os.environ.has_key('LIBBZ2_HOME'):
    env.Append(LIBPATH = [os.environ['LIBBZ2_HOME']])

  if not conf.CheckLib('bz2'):
    print 'Need libbzip2 please set LIBBZ2_HOME';
    Exit(1);

src = ['protomol.cpp']

if env['PLATFORM'] == 'win32':
  env.Append(LIBS = 'wsock32')
else:
  env.Append(LIBS = 'pthread')
  env.Append(PROGSUFFIX = '.exe')

env.Program('FahCore_b4', src)
