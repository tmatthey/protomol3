	public void axes(GL gl, float radius)
	{
          gl.glPushMatrix();
          gl.glTranslatef( -radius, -radius, 0.0f  );  
          gl.glScalef(radius/5f,radius/5f,radius/5f);
          gl.glRotatef(rot_xyz[0], 1.0f, 0.0f, 0.0f);
          gl.glRotatef(rot_xyz[1], 0.0f, 1.0f, 0.0f);
          gl.glRotatef(rot_xyz[2], 0.0f, 0.0f, 1.0f);
          //

          gl.glPushMatrix();
          //text
          gl.glPushAttrib(GL.GL_ALL_ATTRIB_BITS); 
          gl.glPushMatrix(); gl.glTranslatef( -0.15f, -0.15f, 1.2f  );  gl.glScalef(0.5f,0.5f,0.5f); gl.glMaterialfv( GL.GL_FRONT_AND_BACK, GL.GL_DIFFUSE, gl_blue );
          gl.glListBase(base3D); 
          gl.glCallLists(1, GL.GL_UNSIGNED_BYTE, "Z"); 
          gl.glPopMatrix();  
          gl.glPushMatrix(); gl.glTranslatef( 1.2, -0.15, 0.0  );  gl.glScalef(0.5,0.5,0.5); glMaterialfv( GL.GL_FRONT_AND_BACK, GL.GL_DIFFUSE, gl.gl_red );
          //gl.glListBase(base3D); gl.glCallLists(strlen(dati), GL.GL_UNSIGNED_BYTE, dati); 
          gl.glListBase(base3D); gl.glCallLists(1, GL.GL_UNSIGNED_BYTE, "X"); 
          gl.glPopMatrix();  
          gl.glPushMatrix(); gl.glTranslatef( -0.15, 1.2, 0.0  );  gl.glScalef(0.5,0.5,0.5); gl.glMaterialfv( GL.GL_FRONT_AND_BACK, GL.GL_DIFFUSE, gl_green );
          gl.glListBase(base3D); gl.glCallLists(1, GL.GL_UNSIGNED_BYTE, "Y"); 
          gl.glPopMatrix();  
          gl.glPopAttrib();
          //cylinders
          quadObj = gl.gluNewQuadric();
          gl.glMaterialfv( GL.GL_FRONT_AND_BACK, GL.GL_DIFFUSE, gl.gl_blue );   
          gl.gluSphere( quadObj, 0.08, 10, 10 );
          gl.gluCylinder( quadObj, 0.08, 0.08, 0.5, 10, 10 );
          gl.glTranslatef( 0.0, 0.0, 0.5 ); gl.gluCylinder( quadObj, 0.2, 0.0, 0.5, 10, 10 );gl.glTranslatef( 0.0, 0.0, -0.5 );
          gl.glRotatef(-90, 1.0, 0.0, 0.0);  
          gl.glMaterialfv( GL.GL_FRONT_AND_BACK, GL.GL_DIFFUSE, gl.gl_green );   
          gl.gluCylinder( quadObj, 0.08, 0.08, 0.5, 10, 10 );
          gl.glTranslatef( 0.0, 0.0, 0.5 ); gl.gluCylinder( quadObj, 0.2, 0.0, 0.5, 10, 10 ); gl.glTranslatef( 0.0, 0.0, -0.5 );
          gl.glRotatef(90, 0.0, 1.0, 0.0);  
          gl.glMaterialfv( GL.GL_FRONT_AND_BACK, GL.GL_DIFFUSE, gl.gl_red );   
          gl.gluCylinder( quadObj, 0.08, 0.08, 0.5, 10, 10 );
          gl.glTranslatef( 0.0, 0.0, 0.5 ); gl.gluCylinder( quadObj, 0.2, 0.0, 0.5, 10, 10 ); gl.glTranslatef( 0.0, 0.0, -0.5 );
          //
          gl.glPopMatrix();  
          gl.glPopMatrix();  

        }


                    /*
                    gl.glRotatef(rot_xyz[0], 1.0f, 0.0f, 0.0f);
                    gl.glRotatef(rot_xyz[1], 0.0f, 1.0f, 0.0f);
                    gl.glRotatef(rot_xyz[2], 0.0f, 0.0f, 1.0f);
                     */


        private float [] rot_xyz = {0.0f, 0.0f, 0.0f};
        private float [] old_rot_xyz = {0.0f, 0.0f, 0.0f};


        //save current mouse rotations
        old_rot_xyz[0] = rot_xyz[0];
	old_rot_xyz[1] = rot_xyz[1];
 	old_rot_xyz[2] = rot_xyz[2];
        old_scale_xyz = scale_xyz;


        float [] cos_xyz = new float[3];
        float [] sin_xyz = new float[3];
        float [] rot_m = new float[9];
        


            //find cos/sine
            for(int i=0;i<3;i++){
                    cos_xyz[i] = (float)Math.cos(-rot_xyz[i] * 6.284 / 360.0);
                    sin_xyz[i] = (float)Math.sin(-rot_xyz[i] * 6.284 / 360.0);
            }
            //rotation matrix
            //               [     cy cz               cy sz           -sy ]
            //               [                                             ]
            //         ra := [sx sy cz - cx sz    sx sy sz + cx cz    sx cy]
            //               [                                             ]
            //               [cx sy cz + sx sz    cx sy sz - sx cz    cx cy]
            rot_m[0] = cos_xyz[1] * cos_xyz[2]; 
            rot_m[1] = cos_xyz[1] * sin_xyz[2]; 
            rot_m[2] = -sin_xyz[1];
            rot_m[3] = sin_xyz[0] * sin_xyz[1] * cos_xyz[2] - cos_xyz[0] * sin_xyz[2]; 
            rot_m[4] = sin_xyz[0] * sin_xyz[1] * sin_xyz[2] + cos_xyz[0] * cos_xyz[2]; 
            rot_m[5] = sin_xyz[0] * cos_xyz[1];
            rot_m[6] = cos_xyz[0] * sin_xyz[1] * cos_xyz[2] + sin_xyz[0] * sin_xyz[2]; 
            rot_m[7] = cos_xyz[0] * sin_xyz[1] * sin_xyz[2] - sin_xyz[0] * cos_xyz[2]; 
            rot_m[8] = cos_xyz[0] * cos_xyz[1];
            //find new vector
            //approximation
            rot_xyz[0] = cos_xyz[1]*cos_xyz[1]*cos_xyz[2]*cos_xyz[2]*thetaX + old_rot_xyz[0];
            rot_xyz[1] = cos_xyz[0]*thetaY + old_rot_xyz[1];
            rot_xyz[2] = -sin_xyz[1]*thetaX + sin_xyz[0]*cos_xyz[1]*thetaY + old_rot_xyz[2];















            //cylinders
            GLUquadric quadObj = glu.gluNewQuadric();
            for(int i=0;i<3;i++){
                gl.glMaterialfv( GL.GL_FRONT_AND_BACK, GL.GL_DIFFUSE, gl_col[i], 0);   
                glu.gluSphere( quadObj, 0.08f, 10, 10 );
                glu.gluCylinder( quadObj, 0.08f, 0.08f, 0.5f, 10, 10 );
                gl.glTranslatef( 0.0f, 0.0f, 0.5f ); 
                glu.gluCylinder( quadObj, 0.2f, 0.0f, 0.5f, 10, 10 );
                gl.glTranslatef( 0.0f, 0.0f, -0.5f );
                if(i==0) gl.glRotatef(-90f, 1.0f, 0.0f, 0.0f);  
                else gl.glRotatef(90f, 0.0f, 1.0f, 0.0f);  
            }
            */  


            /*
            gl.glPushAttrib(GL.GL_ALL_ATTRIB_BITS); 
            for(int i=0;i<3;i++){
            gl.glPushMatrix();
            gl.glTranslatef( 0.15f, -0.15f, -1.2f  ); 
            gl.glRotatef(180.0f, 0.0f, 1.0f, 0.0f);
            renderer.begin3DRendering();
            int k = cor_reord[i];
            renderer.setColor(gl_col[k][0], gl_col[k][1], gl_col[k][2], gl_col[k][3]);
            renderer.draw3D(xyzs[i], 0.0f, 0.0f, 0.0f, 0.015f);
            renderer.end3DRendering();
            gl.glPopMatrix();
            if(i==0) gl.glRotatef(-90f, 1.0f, 0.0f, 0.0f);  
            else gl.glRotatef(90f, 0.0f, 1.0f, 0.0f);  
 
            }
            gl.glPopAttrib(); 
            */



                float [][] gl_col = { { 0.5f, 0.1f, 0.1f, 1.0f },
                                    { 0.1f, 0.5f, 0.1f, 1.0f },
                                    { 0.1f, 0.1f, 0.5f, 1.0f }};
                int [] cor_reord = {1, 0, 2};
                String [] xyzs = {"X","Y","Z"};
                //

