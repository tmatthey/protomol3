import os
import sys
import imp

# This allows the use of the F@H compiler configuration script as it is.
compiler = imp.new_module('compiler')
execfile('compiler.py', compiler.__dict__)

execfile('config.py')
execfile('configfah.py')
execfile('boost.py')

# Command Line Options
vars = Variables('options.py')

# Add options
add_fah_vars(vars)
add_config_vars(vars)
compiler.add_vars(vars)

# Create environment and import external PATH
env = Environment(variables = vars, ENV = os.environ)
Export('env')

# FAH Options
fah = int(env.get('fah', 0))

# Include protomol
env.Append(CPPPATH = '#')

# Generate Help
Help(vars.GenerateHelpText(env))

# Do configuration
if not env.GetOption('clean'):
    execfile('package_h.py')

    # Configure
    conf = Configure(env, custom_tests = {'BoostVersion' : boost_check_version})
    Export('conf')

    # Run Configurations
    compiler.configure(conf)
    config_configure()

    if fah: fah_configure()

    env = conf.Finish()

# ProtoMol Library
libname = 'protomol'
if fah: libname = libname + '-fah'
libsrc = []

# Import subdir build files
for s in SConscript('protomol/SConscript'):
    libsrc.append('#/protomol/' + s)

if fah:
    libsrc.append('#/protomol/modules.cpp')

# Build Library
lib = env.Library(libname, libsrc)

# ProtoMol Sources
src = ['protomol/main.cpp', 'protomol/modules.cpp']

# Build Application
name = 'ProtoMol'
if (env['PLATFORM'] == 'darwin'): name += '-app' # Why?
protomol = env.Program(name, src + [lib])

if fah: Default(lib)
else: Default(protomol)

# Build Visual Studio Project
if env['PLATFORM'] == 'win32':
    src = []

    def add_hdrs(arg, dir, files):
        global src
        for file in files:
            if file.endswith(arg):
                src += [dir + os.sep + file]

    os.path.walk('protomol', add_hdrs, '.h')
    inc = src
    src = []
    os.path.walk('protomol', add_hdrs, '.cpp')

    if env.get('debug'): variant = 'Debug'
    else: variant = 'Release'

    env.MSVSProject(target = 'ProtoMol' + env['MSVSPROJECTSUFFIX'],
                    srcs = src, incs = inc,
                    auto_build_solution = 0,
                    variant = ['Debug', 'Release'],
                    buildtarget = ['debug=1', 'debug=0'])
