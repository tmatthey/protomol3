# Configure system boilerplate
import os, sys
#sys.path.append(os.environ.get('CONFIG_SCRIPTS_HOME', '.'))
import config

# Setup
env = config.make_env(['compiler', 'dist', 'libprotomol'])

# Configure
conf = Configure(env)

# Do configuration
if not env.GetOption('clean'):
    # Configure compiler
    config.configure('compiler', conf)

    # Dependencies
    lib = config.load_conf_module('libprotomol', '.')
    lib.configure_deps(conf)

    # Mostly static libraries
    if env.get('mostly_static', 0): config.compiler.mostly_static_libs(env)

    # libprotomol path
    env.Append(CPPPATH = ['#'])

conf.Finish()


# package.h
execfile('package_h.py')


# libfah
use_fah = int(env.get('fah', 0))


# ProtoMol Library
libname = 'protomol'
if use_fah: libname = libname + '-fah'
libsrc = []

# Import subdir build files
for s in SConscript('protomol/SConscript'):
    libsrc.append('#/protomol/' + s)

if use_fah:
    libsrc.append('#/protomol/modules.cpp')

lib = env.Library(libname, libsrc)


# Build Application
src = ['protomol/main.cpp', 'protomol/modules.cpp']
name = 'ProtoMol'
if (env['PLATFORM'] == 'darwin'): name += '-app' # Why?
protomol = env.Program(name, src + [lib])
Default(protomol)

# Dist
config.configure('dist', conf, default_distver = '3.0.0')
tar = env.TarBZ2Dist('ProtoMol-bin', ['ProtoMol' + env['PROGSUFFIX']])
Alias('dist', tar)
AlwaysBuild(tar)


# Build Visual Studio Project
if env['PLATFORM'] == 'win32':
    src = []

    def add_hdrs(arg, dir, files):
        global src
        for file in files:
            if file.endswith(arg):
                src += [dir + os.sep + file]

    os.path.walk('protomol', add_hdrs, '.h')
    inc = src
    src = []
    os.path.walk('protomol', add_hdrs, '.cpp')

    if env.get('debug'): variant = 'Debug'
    else: variant = 'Release'

    env.MSVSProject(target = 'ProtoMol' + env['MSVSPROJECTSUFFIX'],
                    srcs = src, incs = inc,
                    auto_build_solution = 0,
                    variant = ['Debug', 'Release'],
                    buildtarget = ['debug=1', 'debug=0'])
